import { useState, useRef, useEffect } from 'react';
import ThemeToggle from '../components/ThemeToggle';
import AudioVisualizer from '../components/AudioVisualizer';
import LiveVisualizer from '../components/LiveVisualizer';
import { audioEngine } from '../audioEngine';

export function RecordPage() {
  const [isRecording, setIsRecording] = useState(false);
  const [isMetronomePlaying, setIsMetronomePlaying] = useState(false);
  const [bpm, setBpm] = useState(120);
  const [metronomeVolume, setMetronomeVolume] = useState(0.7);
  const [microphoneVolume, setMicrophoneVolume] = useState(0.8);
  const [microphoneSensitivity, setMicrophoneSensitivity] = useState(1.0);
  const [recordedBlob, setRecordedBlob] = useState<Blob | null>(null);
  const [recordedAudio, setRecordedAudio] = useState<HTMLAudioElement | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isAudioLoading, setIsAudioLoading] = useState(false);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const mediaStreamRef = useRef<MediaStream | null>(null);
  const chunksRef = useRef<Blob[]>([]);
  const recordingTimerRef = useRef<number | null>(null);
  const playbackTimerRef = useRef<number | null>(null);

  const startMetronome = async () => {
    if (isMetronomePlaying) {
      audioEngine.stopMetronome();
      setIsMetronomePlaying(false);
    } else {
      audioEngine.setMetronomeVolume(metronomeVolume);
      await audioEngine.startMetronome(bpm);
      setIsMetronomePlaying(true);
    }
  };

  const handleMetronomeVolumeChange = (volume: number) => {
    setMetronomeVolume(volume);
    audioEngine.setMetronomeVolume(volume);
  };

  const handleMicrophoneVolumeChange = (volume: number) => {
    setMicrophoneVolume(volume);
    audioEngine.setMicrophoneVolume(volume);
  };

  const handleMicrophoneSensitivityChange = (sensitivity: number) => {
    setMicrophoneSensitivity(sensitivity);
    audioEngine.setMicrophoneSensitivity(sensitivity);
  };

  const handleBpmChange = (newBpm: number) => {
    const validBpm = Math.max(30, Math.min(300, newBpm || 120));
    setBpm(validBpm);
    // Update metronome BPM in real-time if it's playing
    if (isMetronomePlaying) {
      audioEngine.setMetronomeBpm(validBpm);
    }
  };

  // Cleanup only on component unmount
  useEffect(() => {
    return () => {
      // Stop metronome on unmount
      audioEngine.stopMetronome();
      // Stop microphone monitoring
      audioEngine.stopMicrophoneMonitoring();
      // Stop microphone stream
      if (mediaStreamRef.current) {
        mediaStreamRef.current.getTracks().forEach(track => track.stop());
      }
      // Clear timers
      if (recordingTimerRef.current) {
        clearInterval(recordingTimerRef.current);
      }
      if (playbackTimerRef.current) {
        clearInterval(playbackTimerRef.current);
      }
    };
  }, []); // Empty dependency array - runs only on mount/unmount



  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 48000
        }
      });
      mediaStreamRef.current = stream;
      chunksRef.current = [];

      // Setup monitoring and get processed stream with applied sensitivity
      const processedStream = audioEngine.setupMicrophoneMonitoring(stream);
      audioEngine.setMicrophoneVolume(microphoneVolume);
      audioEngine.setMicrophoneSensitivity(microphoneSensitivity);

      const options: MediaRecorderOptions = {};
      try {
        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥–µ–∫–∏
        if (MediaRecorder.isTypeSupported('audio/webm;codecs=opus')) {
          options.mimeType = 'audio/webm;codecs=opus';
          options.audioBitsPerSecond = 128000; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        } else if (MediaRecorder.isTypeSupported('audio/webm')) {
          options.mimeType = 'audio/webm';
        } else if (MediaRecorder.isTypeSupported('audio/mp4')) {
          options.mimeType = 'audio/mp4';
        }
      } catch {
        // Fallback to default
      }

      // MediaRecorder records processed stream with applied sensitivity
      const recorder = new MediaRecorder(processedStream, options);
      mediaRecorderRef.current = recorder;

      recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };

      recorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'audio/webm' });
        setRecordedBlob(blob);
        
        // –°–æ–∑–¥–∞–µ–º blob URL –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const audioUrl = URL.createObjectURL(blob);
        const audio = new Audio(audioUrl);
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É - –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        audio.preload = 'metadata';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        setIsAudioLoading(true);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏–æ
        audio.onloadedmetadata = () => {
          const audioDuration = audio.duration;
          console.log('üéµ Audio loaded metadata:', {
            duration: audioDuration,
            isFinite: isFinite(audioDuration),
            readyState: audio.readyState,
            src: audio.src.substring(0, 50) + '...'
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ duration –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
          if (isFinite(audioDuration) && audioDuration > 0) {
            setDuration(audioDuration);
            setIsAudioLoading(false); // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            console.log('‚úÖ Duration set to:', audioDuration);
          } else {
            console.log('‚ùå Invalid duration, setting to 0:', audioDuration);
            setDuration(0);
          }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        audio.oncanplaythrough = () => {
          if (duration === 0 && isFinite(audio.duration) && audio.duration > 0) {
            console.log('üîÑ Setting duration from canplaythrough:', audio.duration);
            setDuration(audio.duration);
            setIsAudioLoading(false); // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        audio.oncanplay = () => {
          if (duration === 0 && isFinite(audio.duration) && audio.duration > 0) {
            console.log('‚ö° Setting duration from canplay (fast):', audio.duration);
            setDuration(audio.duration);
            setIsAudioLoading(false); // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          }
        };
        
        audio.ontimeupdate = () => {
          const time = audio.currentTime;
          if (isFinite(time) && time >= 0) {
            setCurrentTime(time);
          }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è play –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        audio.onplay = () => {
          setIsPlaying(true);
          if (playbackTimerRef.current) {
            clearInterval(playbackTimerRef.current);
          }
          playbackTimerRef.current = window.setInterval(() => {
            if (audio && !audio.paused && !audio.ended) {
              const time = audio.currentTime;
              if (isFinite(time) && time >= 0) {
                setCurrentTime(time);
              }
            }
          }, 100);
        };
        
        audio.onended = () => {
          setIsPlaying(false);
          setCurrentTime(0);
          if (playbackTimerRef.current) {
            clearInterval(playbackTimerRef.current);
            playbackTimerRef.current = null;
          }
        };
        
        audio.onpause = () => {
          if (playbackTimerRef.current) {
            clearInterval(playbackTimerRef.current);
            playbackTimerRef.current = null;
          }
        };
        
        setRecordedAudio(audio);
        setIsRecording(false);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
        if (recordingTimerRef.current) {
          clearInterval(recordingTimerRef.current);
          recordingTimerRef.current = null;
        }
        
        // Stop monitoring and microphone
        audioEngine.stopMicrophoneMonitoring();
        if (mediaStreamRef.current) {
          mediaStreamRef.current.getTracks().forEach(track => track.stop());
          mediaStreamRef.current = null;
        }
      };

      recorder.start();
      setIsRecording(true);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
      setRecordingTime(0);
      recordingTimerRef.current = window.setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
      if (recordingTimerRef.current) {
        clearInterval(recordingTimerRef.current);
        recordingTimerRef.current = null;
      }
      
      // Stop microphone monitoring
      audioEngine.stopMicrophoneMonitoring();
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–æ–Ω–æ–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
      if (isMetronomePlaying) {
        audioEngine.stopMetronome();
        setIsMetronomePlaying(false);
      }
    }
  };

  const playRecordedAudio = async () => {
    if (recordedAudio) {
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –∞—É–¥–∏–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ
        if (recordedAudio.readyState < 2) {
          setIsAudioLoading(true);
        }
        
        await recordedAudio.play();
        setIsPlaying(true);
        setIsAudioLoading(false);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (playbackTimerRef.current) {
          clearInterval(playbackTimerRef.current);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        playbackTimerRef.current = window.setInterval(() => {
          if (recordedAudio && !recordedAudio.paused && !recordedAudio.ended) {
            const time = recordedAudio.currentTime;
            if (isFinite(time) && time >= 0) {
              setCurrentTime(time);
            }
          }
        }, 100);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        setIsAudioLoading(false);
      }
    }
  };

  const stopRecordedAudio = () => {
    if (recordedAudio) {
      recordedAudio.pause();
      recordedAudio.currentTime = 0;
      setCurrentTime(0);
      setIsPlaying(false);
      
      if (playbackTimerRef.current) {
        clearInterval(playbackTimerRef.current);
        playbackTimerRef.current = null;
      }
    }
  };

  const seekToPosition = (position: number) => {
    console.log('üéµ seekToPosition called:', {
      position,
      duration,
      hasRecordedAudio: !!recordedAudio,
      isPlaying,
      currentPlaybackTimer: !!playbackTimerRef.current
    });
    
    if (recordedAudio && duration > 0 && isFinite(duration) && isFinite(position)) {
      const newTime = (position / 100) * duration;
      
      console.log('üéØ Calculating new time:', {
        position,
        duration,
        newTime,
        isFiniteNewTime: isFinite(newTime),
        inBounds: newTime >= 0 && newTime <= duration
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ newTime –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
      if (isFinite(newTime) && newTime >= 0 && newTime <= duration) {
        recordedAudio.currentTime = newTime;
        setCurrentTime(newTime);
        
        console.log('‚úÖ Successfully set audio currentTime to:', newTime);
        
        // –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        if (isPlaying && !playbackTimerRef.current) {
          console.log('üîÑ Restarting playback timer');
          playbackTimerRef.current = window.setInterval(() => {
            if (recordedAudio && !recordedAudio.paused && !recordedAudio.ended) {
              const time = recordedAudio.currentTime;
              if (isFinite(time) && time >= 0) {
                setCurrentTime(time);
              }
            }
          }, 100);
        }
      } else {
        console.log('‚ùå Invalid newTime:', newTime);
      }
    } else {
      console.log('‚ùå Invalid conditions for seeking:', {
        hasRecordedAudio: !!recordedAudio,
        duration,
        isFiniteDuration: isFinite(duration),
        isFinitePosition: isFinite(position)
      });
    }
  };

  const formatTime = (seconds: number): string => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ seconds –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    if (!isFinite(seconds) || seconds < 0) {
      return '0:00';
    }
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div id="record-page" style={{ display: 'grid', placeItems: 'center', minHeight: '100vh', width: '100%', padding: '20px', boxSizing: 'border-box' }}>
      <div id="record-theme-toggle" style={{ position: 'fixed', top: 16, right: 16 }}>
        <ThemeToggle />
      </div>
      
      <div id="record-main-container" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 'clamp(20px, 4vw, 30px)', maxWidth: 'clamp(300px, 90vw, 600px)', width: '100%' }}>
        <div id="record-header" style={{ display: 'flex', alignItems: 'center', gap: 'clamp(8px, 2vw, 12px)', flexWrap: 'wrap', justifyContent: 'center' }}>
          <button id="back-button" onClick={() => window.history.back()}>‚Üê –ù–∞–∑–∞–¥</button>
          <h2 id="page-title" style={{ margin: 0, fontSize: 'clamp(18px, 4vw, 24px)' }}>–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ</h2>
        </div>

        {/* Metronome Controls */}
        <div id="metronome-section" className="card" style={{ width: '100%', textAlign: 'center' }}>
          <h3 id="metronome-title" style={{ margin: '0 0 16px 0', fontSize: 'clamp(16px, 3vw, 20px)' }}>–ú–µ—Ç—Ä–æ–Ω–æ–º</h3>
          <div id="metronome-controls" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 'clamp(12px, 3vw, 20px)' }}>
            <div id="metronome-buttons" style={{ display: 'flex', alignItems: 'center', gap: 'clamp(12px, 3vw, 20px)', justifyContent: 'center', flexWrap: 'wrap' }}>
              <button
                id="metronome-toggle-button"
                onClick={startMetronome}
                style={{
                  padding: 'clamp(8px, 2vw, 12px) clamp(16px, 3vw, 24px)',
                  borderRadius: '6px',
                  border: '1px solid var(--border)',
                  background: isMetronomePlaying ? 'var(--link)' : 'var(--button-bg)',
                  color: isMetronomePlaying ? 'white' : 'var(--button-fg)',
                  cursor: 'pointer',
                  fontSize: 'clamp(14px, 2.5vw, 16px)',
                  transition: 'all 0.2s ease'
                }}
              >
                {isMetronomePlaying ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å'} –º–µ—Ç—Ä–æ–Ω–æ–º
              </button>
            </div>
            
            {/* Metronome Volume Control */}
            <div id="metronome-volume-control" style={{ display: 'flex', alignItems: 'center', gap: 12, width: '100%', maxWidth: '300px' }}>
              <span id="metronome-volume-label" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '60px' }}>üîä –ú–µ—Ç—Ä–æ–Ω–æ–º:</span>
              <input
                id="metronome-volume-slider"
                type="range"
                min="0"
                max="1"
                step="0.1"
                value={metronomeVolume}
                onChange={(e) => handleMetronomeVolumeChange(Number(e.target.value))}
                style={{ 
                  flex: 1, 
                  height: '6px', 
                  borderRadius: '3px', 
                  background: 'var(--border)',
                  cursor: 'pointer'
                }}
              />
              <span id="metronome-volume-value" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '40px', fontWeight: 'bold' }}>
                {Math.round(metronomeVolume * 100)}%
              </span>
            </div>
            
            {/* Microphone Monitoring Volume Control */}
            <div id="microphone-volume-control" style={{ display: 'flex', alignItems: 'center', gap: 12, width: '100%', maxWidth: '300px' }}>
              <span id="microphone-volume-label" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '60px' }}>üé§ –ì—Ä–æ–º–∫–æ—Å—Ç—å:</span>
              <input
                id="microphone-volume-slider"
                type="range"
                min="0"
                max="1"
                step="0.1"
                value={microphoneVolume}
                onChange={(e) => handleMicrophoneVolumeChange(Number(e.target.value))}
                style={{ 
                  flex: 1, 
                  height: '6px', 
                  borderRadius: '3px', 
                  background: 'var(--border)',
                  cursor: 'pointer'
                }}
              />
              <span id="microphone-volume-value" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '40px', fontWeight: 'bold' }}>
                {Math.round(microphoneVolume * 100)}%
              </span>
            </div>
            
            {/* Microphone Sensitivity Control */}
            <div id="microphone-sensitivity-control" style={{ display: 'flex', alignItems: 'center', gap: 12, width: '100%', maxWidth: '300px' }}>
              <span id="microphone-sensitivity-label" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '60px' }}>üì∂ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
              <input
                id="microphone-sensitivity-slider"
                type="range"
                min="0.1"
                max="3.0"
                step="0.1"
                value={microphoneSensitivity}
                onChange={(e) => handleMicrophoneSensitivityChange(Number(e.target.value))}
                style={{ 
                  flex: 1, 
                  height: '6px', 
                  borderRadius: '3px', 
                  background: 'var(--border)',
                  cursor: 'pointer'
                }}
              />
              <span id="microphone-sensitivity-value" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '40px', fontWeight: 'bold' }}>
                {microphoneSensitivity.toFixed(1)}x
              </span>
            </div>
            
            {/* BPM Range Slider */}
            <div id="bpm-control" style={{ display: 'flex', alignItems: 'center', gap: 12, width: '100%', maxWidth: '300px' }}>
              <span id="bpm-label" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '60px' }}>üéµ BPM:</span>
              <input
                id="bpm-slider"
                type="range"
                min="30"
                max="300"
                step="1"
                value={bpm}
                onChange={(e) => handleBpmChange(Number(e.target.value))}
                style={{ 
                  flex: 1, 
                  height: '6px', 
                  borderRadius: '3px', 
                  background: 'var(--border)',
                  cursor: 'pointer'
                }}
              />
              <span id="bpm-value" style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', minWidth: '40px', fontWeight: 'bold' }}>
                {bpm}
              </span>
            </div>
            
            {/* Status indicators */}
            <div id="metronome-status-indicators" style={{ textAlign: 'center' }}>
              {isMetronomePlaying && (
                <div id="metronome-playing-status" style={{ 
                  fontSize: 'clamp(12px, 2.5vw, 14px)', 
                  color: 'var(--link)', 
                  fontWeight: 'bold',
                  marginBottom: '4px'
                }}>
                  üéµ –ú–µ—Ç—Ä–æ–Ω–æ–º: {bpm} BPM
                </div>
              )}
              
              {isRecording && (
                <div id="recording-clean-status" style={{ 
                  fontSize: 'clamp(12px, 2.5vw, 14px)', 
                  color: '#dc3545', 
                  fontWeight: 'bold'
                }}>
                  üé§ –ß–∏—Å—Ç–∞—è –∑–∞–ø–∏—Å—å (–±–µ–∑ –º–µ—Ç—Ä–æ–Ω–æ–º–∞)
                </div>
              )}
              
              {isRecording && isMetronomePlaying && (
                <div id="recording-with-metronome-hint" style={{ 
                  fontSize: '10px', 
                  opacity: 0.7, 
                  marginTop: '4px'
                }}>
                  –í—ã —Å–ª—ã—à–∏—Ç–µ –º–µ—Ç—Ä–æ–Ω–æ–º –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö, –Ω–æ –æ–Ω –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
                </div>
              )}
            </div>
            

          </div>
        </div>

        {/* Live –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ */}
        <div id="live-visualizer-container">
          <LiveVisualizer 
            isRecording={isRecording}
            microphoneStream={mediaStreamRef.current}
          />
        </div>

        {/* Recording Controls */}
        <div id="recording-section" className="card" style={{ width: '100%', textAlign: 'center' }}>
          <h3 id="recording-title" style={{ margin: '0 0 16px 0', fontSize: 'clamp(16px, 3vw, 20px)' }}>–ó–∞–ø–∏—Å—å</h3>
          
          {/* Quality Info */}
          <div id="recording-quality-info" style={{ 
            background: 'rgba(var(--link-rgb, 0, 123, 255), 0.1)', 
            border: '1px solid rgba(var(--link-rgb, 0, 123, 255), 0.3)',
            borderRadius: '6px',
            padding: '12px',
            marginBottom: '16px',
            fontSize: 'clamp(11px, 2vw, 13px)',
            lineHeight: '1.4'
          }}>
            üí° <strong>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏:</strong><br/>
            –ú–µ—Ç—Ä–æ–Ω–æ–º —Å–ª—ã—à–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö/–∫–æ–ª–æ–Ω–∫–∞—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.<br/>
            –í –∑–∞–ø–∏—Å—å –ø–æ–ø–∞–¥–∞–µ—Ç –≤–∞—à –≥–æ–ª–æ—Å/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.<br/>
            üì∂ <strong>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> 0.1x = —Ç–∏—Ö–æ, 1.0x = –Ω–æ—Ä–º–∞, 3.0x = –æ—á–µ–Ω—å –≥—Ä–æ–º–∫–æ<br/>
            üéß <strong>–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–Ω–∏:</strong> –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Å–ª—É—à–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö
          </div>
          <div id="recording-playback-buttons" style={{ display: 'flex', alignItems: 'center', gap: 'clamp(12px, 3vw, 20px)', justifyContent: 'center', flexWrap: 'wrap' }}>
            {!isRecording ? (
              <button
                id="start-recording-button"
                onClick={startRecording}
                style={{
                  padding: 'clamp(12px, 3vw, 16px) clamp(24px, 4vw, 32px)',
                  borderRadius: '8px',
                  border: '1px solid var(--border)',
                  background: 'var(--button-bg)',
                  color: 'var(--button-fg)',
                  cursor: 'pointer',
                  fontSize: 'clamp(14px, 2.5vw, 16px)'
                }}
              >
                üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            ) : (
              <button
                id="stop-recording-button"
                onClick={stopRecording}
                style={{
                  padding: 'clamp(12px, 3vw, 16px) clamp(24px, 4vw, 32px)',
                  borderRadius: '8px',
                  border: '1px solid var(--border)',
                  background: '#dc3545',
                  color: 'white',
                  cursor: 'pointer',
                  fontSize: 'clamp(14px, 2.5vw, 16px)'
                }}
              >
                ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            )}
            
            {/* –ö–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
            {recordedBlob && !isRecording && (
              <div id="playback-buttons">
                {!isPlaying ? (
                  <button
                    id="play-button"
                    onClick={playRecordedAudio}
                    style={{
                      padding: 'clamp(12px, 3vw, 16px) clamp(24px, 4vw, 32px)',
                      borderRadius: '8px',
                      border: '1px solid var(--border)',
                      background: 'var(--link)',
                      color: 'white',
                      cursor: 'pointer',
                      fontSize: 'clamp(14px, 2.5vw, 16px)'
                    }}
                  >
                    ‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                  </button>
                ) : (
                  <button
                    id="stop-playback-button"
                    onClick={stopRecordedAudio}
                    style={{
                      padding: 'clamp(12px, 3vw, 16px) clamp(24px, 4vw, 32px)',
                      borderRadius: '8px',
                      border: '1px solid var(--border)',
                      background: '#ff9800',
                      color: 'white',
                      cursor: 'pointer',
                      fontSize: 'clamp(14px, 2.5vw, 16px)'
                    }}
                  >
                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                )}
              </div>
            )}
          </div>
          
          {/* –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ç–∞–π–º–µ—Ä—ã */}
          <div id="status-indicators" style={{ marginTop: 16 }}>
            {isRecording && (
              <div id="recording-status" style={{ color: '#dc3545', fontWeight: 'bold', fontSize: 'clamp(14px, 2.5vw, 16px)' }}>
                üé§ –ó–∞–ø–∏—Å—å... {formatTime(recordingTime)}
              </div>
            )}
            {isPlaying && (
              <div id="playback-status" style={{ color: 'var(--link)', fontWeight: 'bold', fontSize: 'clamp(14px, 2.5vw, 16px)' }}>
                ‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ... {formatTime(currentTime)} / {formatTime(duration)}
              </div>
            )}

          </div>

          {/* –ê—É–¥–∏–æ–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è */}
          {recordedBlob && (
            <div id="audio-visualizer-section">

              {duration > 0 ? (
                <AudioVisualizer 
                  audioBlob={recordedBlob}
                  currentTime={currentTime}
                  duration={duration}
                  isPlaying={isPlaying}
                  onSeek={seekToPosition}
                  onPlayPause={isPlaying ? stopRecordedAudio : playRecordedAudio}
                />
              ) : (
                <div id="audio-loading-indicator" style={{
                  background: isAudioLoading ? '#e3f2fd' : '#fff3cd',
                  border: `1px solid ${isAudioLoading ? '#2196f3' : '#ffeaa7'}`,
                  borderRadius: '8px',
                  padding: '16px',
                  textAlign: 'center',
                  color: isAudioLoading ? '#1976d2' : '#856404',
                  transition: 'all 0.3s ease'
                }}>
                  <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }}>
                    {isAudioLoading ? (
                      <>
                        <div style={{
                          width: '16px',
                          height: '16px',
                          border: '2px solid #2196f3',
                          borderTop: '2px solid transparent',
                          borderRadius: '50%',
                          animation: 'spin 1s linear infinite'
                        }}></div>
                        ‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ...
                      </>
                    ) : (
                      '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ...'
                    )}
                  </div>
                  <div style={{ fontSize: '12px' }}>
                    {isAudioLoading ? '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' : '–ï—Å–ª–∏ —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å'}
                  </div>
                </div>
              )}
            </div>
          )}


        </div>


      </div>
    </div>
  );
}

export default RecordPage;



